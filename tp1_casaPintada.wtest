import tp1_casaPintada.*

describe "Tests respecto de la pintura en lata" {
	
	method crearHabitacion(m2) = 
		object {
			method metrosCuadradosAPintar() = m2
		}	
	
	test "Latas de pintura necesarias para pintar 251 m2 sin aprovechar bien las latas" {
		const habitacion = self.crearHabitacion(251)
		assert.equals(6, pinturaEnLata.cantidadDeLatasAUtilizar(habitacion))
	}	
	
	test "Latas de pintura necesarias para pintar 250 m2 aprovechando bien las latas" {
		const habitacion = self.crearHabitacion(250)
		assert.equals(5, pinturaEnLata.cantidadDeLatasAUtilizar(habitacion))
	}
	
	test "Costo de pintura para habitación de 10 m2 desaprovechando las latas" {
		const habitacion = self.crearHabitacion(10)
		assert.equals(500, pinturaEnLata.costoTotalPinturaEnLata(habitacion))
	}
	
	test "Costo de pintura para habitación de 250 m2 aprovechando las latas" {
		const habitacion = self.crearHabitacion(250)
		assert.equals(2500, pinturaEnLata.costoTotalPinturaEnLata(habitacion))
	}		
}

describe "Tests respecto de los pintores" {
	
	method crearHabitacion(m2) = 
		object {
			method metrosCuadradosAPintar() = m2
		}		
	
	test "Costo de mano de obra de Raúl por pintar 20 m2" {
		const habitacion = self.crearHabitacion(20)
		assert.equals(1400, raul.manoDeObra(habitacion))
	}
	
	test "Costo total de Raúl por pintar 20 m2, mano de obra más costo de pintura" {
		const habitacion = self.crearHabitacion(20)
		assert.equals(1900, raul.tarifaTotalPorTrabajoRealizado(habitacion))
	}
	
	test "Costo total de Carla por pintar 25 m2" {
		const habitacion = self.crearHabitacion(25)
		assert.equals(2250, carla.tarifaTotalPorTrabajoRealizado(habitacion))
	}
	
	test "Costo total de Carla por pintar 26 m2" {
		const habitacion = self.crearHabitacion(26)
		assert.equals(1755, carla.tarifaTotalPorTrabajoRealizado(habitacion))
	}
	
	test "Costo de mano de obra de Venancio por pintar 32 m2" {
		const habitacion = self.crearHabitacion(32)
		assert.equals(1376, venancio.manoDeObra(habitacion))
	}
	
	test "Costo total de Venancio por pintar 32 m2, mano de obra más costo de pintura" {
		const habitacion = self.crearHabitacion(32)
		assert.equals(1626, venancio.tarifaTotalPorTrabajoRealizado(habitacion))
	}
}

describe "Tests respecto de los ambientes" {

	test "Superficie de la cocina" {
		assert.equals(21, aldo.cocinaMetrosCuadradosAPintar())
	}
	
	test "Superficie de la habitación" {
		const habitacion = object {
			method metrosCuadradosAPintar(m2) = m2
		}
		assert.equals(20, habitacion.metrosCuadradosAPintar(20))
	}	
}

describe "Tests respecto de Aldo" {

	method crearHabitacion() = 
		object {
			method metrosCuadradosAPintar() = aldo.superficieTotalAPintar()
		}		

	test "Superficie total a pintar para Aldo, habitación más cocina" {
		assert.equals(41, aldo.superficieTotalAPintar())
	}
	
	test "Presupuesto máximo de Aldo" {
		assert.equals(2200, aldo.presupuestoMaximo())
	}
	
	test "Aldo no puede contratar a Raúl porque supera su presupuesto máximo ($2.200, el 20% de $11.000)" {
		const habitacion = self.crearHabitacion()
		assert.notThat(raul.manoDeObra(habitacion) <= aldo.presupuestoMaximo())
	}
	
	test "Aldo ahorró $10.000 más, ahora si puede contratar a Raúl (su presupuesto máximo ahora es $4.200, 20% de $21.000)" {
		const habitacion = self.crearHabitacion()
		assert.that(raul.manoDeObra(habitacion) <= aldo.nuevoPresupuestoMaximo(10000))
	}

	test "Aldo ahorró $1.000 más, pintura cuesta $400, pero no puede contratar a Raúl porque supera su presupuesto máximo ($2.400, 20% de $12.000)" {
		pinturaEnLata.precio(400)
		const habitacion = self.crearHabitacion()
		assert.notThat(raul.tarifaTotalPorTrabajoRealizado(habitacion) <= aldo.nuevoPresupuestoMaximo(1000))
	}
	
	test "Aldo ahorró $4.000 más, y puede contratar a Carla (su presupuesto máximo ahora es $3.000, 20% de $15.000)" {
		const habitacion = self.crearHabitacion()
		assert.that(carla.tarifaTotalPorTrabajoRealizado(habitacion) <= aldo.nuevoPresupuestoMaximo(4000))
	}
	
	test "Aldo puede contratar a Venancio con su presupuesto máximo inicial que es $2.200" {
		const habitacion = self.crearHabitacion()
		assert.that(venancio.tarifaTotalPorTrabajoRealizado(habitacion) <= aldo.presupuestoMaximo())
	}
}

describe "Tests respecto de la pintura a granel" {
	
	method crearHabitacion(m2) = 
		object {
			method metrosCuadradosAPintar() = m2
		}		
	
	test "Costo de pintura de una superficie de 10 m2" {
		const habitacion = self.crearHabitacion(10)
		assert.equals(60, pinturaPorMayor.costoTotalPinturaPorMayor(habitacion))
	}
	
	test "Costo de pintura de una superficie de 11 m2" {
		const habitacion = self.crearHabitacion(11)
		assert.equals(72, pinturaPorMayor.costoTotalPinturaPorMayor(habitacion))
	}
	
	test "Raúl trabaja con pintura a granel. Aldo ahorra $ 4.650 más y puede contratar a Raúl" {
		const habitacion = self.crearHabitacion(aldo.superficieTotalAPintar())
		assert.that(raul.tarifaTotalPorTrabajoRealizadoConPinturaAGranel(habitacion) <= aldo.nuevoPresupuestoMaximo(4650))
	}
}